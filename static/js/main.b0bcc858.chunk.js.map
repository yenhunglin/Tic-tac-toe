{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","board","turn","index","this","winnerPattern","i","length","check","c0","c1","c2","console","log","setState","className","class","map","currentValue","arr","onClick","squareClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kOAmGeA,G,8DA9Fb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,MAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACxCC,KAAM,KALI,E,wDASFC,GACV,IAAID,EAAOE,KAAKJ,MAAME,KAClBD,EAAQG,KAAKJ,MAAMC,MAEvBA,EAAME,GAASD,EAaf,IAXA,IAAMG,EAAgB,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAC,EAAI,EAAGA,EAAID,EAAcE,OAAQD,IAAK,CAC7C,IAAIE,EAAQH,EAAcC,GACtBG,EAAKD,EAAM,GACXE,EAAKF,EAAM,GACXG,EAAKH,EAAM,GAGbP,EAAMQ,IAAOR,EAAMS,IACnBT,EAAMS,IAAOT,EAAMU,IACnBV,EAAMS,IAAOT,EAAMQ,IACN,IAAbR,EAAMQ,IACO,IAAbR,EAAMS,IACO,IAAbT,EAAMU,IAENC,QAAQC,IAAI,WAyBQ,MAApBT,KAAKJ,MAAME,KACbE,KAAKJ,MAAME,KAAO,IAElBE,KAAKJ,MAAME,KAAO,IAGpBE,KAAKU,SAAS,CACZb,MAAOA,M,+BAKD,IAAD,OACP,OACE,yBAAKc,UAAU,OACb,yBAAKC,MAAM,WACRZ,KAAKJ,MAAMC,MAAMgB,KAAI,SAACC,EAAcf,EAAOgB,GAC1C,OACE,yBAAKC,QAAS,kBAAM,EAAKC,YAAYlB,IAAQa,MAAM,UAChDE,Y,GArFCI,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.b0bcc858.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport \"tachyons\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      turn: \"0\",\n    };\n  }\n\n  squareClick(index) {\n    let turn = this.state.turn;\n    let board = this.state.board;\n\n    board[index] = turn;\n\n    const winnerPattern = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n\n    for (let i = 0; i < winnerPattern.length; i++) {\n      let check = winnerPattern[i];\n      let c0 = check[0];\n      let c1 = check[1];\n      let c2 = check[2];\n      // console.log(board[c0], board[c1], board[c2]);\n      if (\n        board[c0] == board[c1] &&\n        board[c1] == board[c2] &&\n        board[c1] == board[c0] &&\n        board[c0] != \"\" &&\n        board[c1] != \"\" &&\n        board[c2] != \"\"\n      ) {\n        console.log(\"winner!\");\n        // console.log(\"winning\");\n      }\n    }\n\n    // if (board[0] && board[1] && board[2] == \"x\") {\n    //   alert(\"yes\");\n    // } else if (board[3] && board[4] && board[5] == \"x\") {\n    //   alert(\"yes\");\n    // }\n\n    // for (let i = 0; i < winnerPattern.length; i++) {\n    //   let check = winnerPattern[i];\n    //   let c1 = check[0];\n    //   let c2 = check[1];\n    //   let c3 = check[2];\n    //   console.log(board[c1]);\n    //   console.log(board[c2]);\n    //   console.log(board[c3]);\n\n    //   if (board[c1] && board[c2] && board[c3] == \"x\") {\n    //     alert(\"X is the winner\");\n    //   }\n    // }\n\n    if (this.state.turn === \"x\") {\n      this.state.turn = \"0\";\n    } else {\n      this.state.turn = \"x\";\n    }\n\n    this.setState({\n      board: board,\n    });\n    // console.log(board);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div class=\"boarder\">\n          {this.state.board.map((currentValue, index, arr) => {\n            return (\n              <div onClick={() => this.squareClick(index)} class=\"square\">\n                {currentValue}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}